class Solution:
    def alienOrder(self, words: List[str]) -> str:
        adj = {c: set() for w in words for c in w} #creating an adjacency list
        
        #check pairs of words
        for i in range(len(words)-1):
            w1 = words[i]
            w2 = words[i+1]
            minlen = min(len(w1), len(w2))
            if w1[:minlen] == w2[:minlen] and len(w1)>len(w2):
                return ""
            for j in range(minlen):
                if w1[j]!= w2[j]:
                    adj[w1[j]].add(w2[j])
                    break
        
        visit = {} #has two values, False: visited, True: in current path
        res = []
        
        def dfs(c):
            if c in visit:
                return visit[c]
            
            visit[c] = True
            for nei in adj[c]:
                if dfs(nei):
                    return True
            visit[c] = False
            res.append(c) #post order DFS
            
            
        for c in adj:
            if dfs(c):
                return ""
        res.reverse()
        return "".join(res)
        
